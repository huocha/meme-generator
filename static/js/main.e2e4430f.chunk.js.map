{"version":3,"sources":["constant/variables.ts","constant/font.ts","icon/icon_component.tsx","constant/colors.ts","color_chooser/color_chooser_component.tsx","toolbar/toolbar_component.tsx","text_editor/text_editor_component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Command","BackGroundType","fontSizeItems","id","label","fontFamilyItems","iconComponentStyle","props","css","size","bgColor","default","undefined","color","hover","IconComponent","iconClass","styleProps","className","onClick","PRIMARY","Object","freeze","PRIMARY_1","PRIMARY_2","PRIMARY_3","PRIMARY_4","BRIGHT","BRIGHT_1","BRIGHT_2","BRIGHT_3","ColorChooserComponent","React","initialValue","currentColor","setColor","colorChooserStyle","borderColor","type","onChange","value","target","ToolbarComponent","iconStyle","handleIconOnClick","onIconClick","style","display","TEXT_BOLD","TEXT_ITALIC","TEXT_UNDERLINE","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_CENTER","TextEditorWidgetComponent","initTextHTML","textColor","bgImage","shades","INIT_COLOR","INIT_FONT_FAMILY","INIT_FONT_SIZE","setFontColor","setFontSize","setFontFamily","backgroundImage","backgroundColor","italic","setItalic","bold","setBold","underline","setUnderline","setAlign","textAreaRef","rangeRef","start","end","startNode","endNode","onMouseTextEditorUp","e","setCurrentStyle","window","getSelection","onKeyTextEditorUp","currentSelection","anchorNode","anchorOffset","focusNode","focusOffset","nodeType","range","document","createRange","setStart","setEnd","selection","FONT_COLOR","FONT_FAMILY","FONT_SIZE","forEach","command","currentState","queryCommandState","currentValue","queryCommandValue","hexColor","rgb","hexString","split","map","x","parseInt","toString","length","join","rgbToHex","fontName","find","item","rangeCount","removeAllRanges","addRange","execCommand","requestAnimationFrame","current","collapse","node","nodeStack","foundStart","stop","pop","i","childNodes","push","restoreRange","console","log","border","tabIndex","onMouseUp","onKeyUp","contentEditable","dangerouslySetInnerHTML","__html","ref","onBlur","getRangeAt","startContainer","endContainer","startOffset","endOffset","setCaretPosition","fontSize","fontFamily","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2e4430f.chunk.js","sourcesContent":["// @exposed\nexport enum Command {\n  TEXT_BOLD = \"bold\",\n  TEXT_ITALIC = \"italic\",\n  TEXT_UNDERLINE = \"underline\",\n  FONT_COLOR = \"forecolor\",\n  FONT_FAMILY = \"fontName\",\n  FONT_SIZE = \"fontSize\",\n  ALIGN_LEFT = \"justifyLeft\",\n  ALIGN_RIGHT = \"justifyRight\",\n  ALIGN_CENTER = \"justifyCenter\"\n}\n\nexport enum BackGroundType {\n  IMAGE = \"image\",\n  COLOR = \"color\"\n}\n","// exposed\n\nexport const fontSizeItems = [\n  { id: \"1\", label: \"Small\" },\n  { id: \"3\", label: \"Normal\" },\n  { id: \"5\", label: \"Large\" },\n  { id: \"7\", label: \"Huge\" }\n];\n\nexport const fontFamilyItems = [\n  { id: \"1\", label: \"Arial\" },\n  { id: \"2\", label: \"Arial Narrow\" },\n  { id: \"3\", label: \"Calibri\" },\n  { id: \"4\", label: \"Clear Sans\" },\n  { id: \"5\", label: \"Comic Sans MS\" },\n  { id: \"6\", label: \"RobotoR\" }\n];\n","import * as React from \"react\";\nimport {\n  IconComponentProps,\n  IconComponentStyleProps\n} from \"./icon_component.interfaces\";\nimport { css, cx } from \"emotion\";\n\nexport const iconComponentStyle = (props: IconComponentStyleProps) => css`\n  label: icon-component;\n  width: ${props.size || \"18px\"};\n  height: ${props.size || \"18px\"};\n  padding: 4px 8px;\n  margin: 4px;\n  background-color: ${props.bgColor ? props.bgColor.default : undefined};\n  color: ${props.color ? props.color.default : undefined};\n  border-radius: 4px;\n  &:hover {\n    cursor: pointer;\n    background-color: ${props.bgColor ? props.bgColor.hover : undefined};\n    color: ${props.color ? props.color.hover : undefined};\n  }\n`;\n\nexport const IconComponent = (props: IconComponentProps) => {\n  const { id, iconClass, styleProps } = props;\n\n  return (\n    <div\n      id={id}\n      className={iconComponentStyle({ ...styleProps })}\n      onClick={() => props.onClick(id)}\n    >\n      <i className={iconClass}></i>\n    </div>\n  );\n};\n","const PRIMARY = Object.freeze({\n  PRIMARY_1: \"#0F4C81\",\n  PRIMARY_2: \"#658DC6\",\n  PRIMARY_3: \"#B5C7D3\",\n  PRIMARY_4: \"#7E868A\"\n});\n\nconst BRIGHT = Object.freeze({\n  BRIGHT_1: \"#A38E80\",\n  BRIGHT_2: \"#F5B895\",\n  BRIGHT_3: \"#F2D6AE\"\n});\n\nexport { PRIMARY, BRIGHT };\n","import * as React from \"react\";\nimport { css } from \"emotion\";\nimport { ColorProps } from \"./color_chooser_component.interfaces\";\nimport { PRIMARY } from \"../constant/colors\";\n\nexport const ColorChooserComponent = (props: ColorProps) => {\n  const [currentColor, setColor] = React.useState(props.initialValue);\n  return (\n    <div\n      className={colorChooserStyle({\n        bgColor: currentColor,\n        size: props.size,\n        borderColor: PRIMARY.PRIMARY_1\n      })}\n    >\n      <div className=\"color-chooser-wrapper\">\n        <input\n          className=\"color-chooser-input\"\n          type=\"color\"\n          onChange={value => setColor(value.target.value)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport interface ColorChooserProps {\n  bgColor: string;\n  size: number;\n  borderColor: string;\n}\n\nexport const colorChooserStyle = (props: ColorChooserProps) => css`\n  label: color-chooser;\n  border: 1px solid ${props.bgColor};\n  border-radius: 4px;\n  padding: 0 16px 0 4px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .color-chooser-wrapper {\n    width: ${props.size}px;\n    height: ${props.size}px;\n    border-radius: 15px;\n    background-color: ${props.bgColor};\n    .color-chooser-input {\n      opacity: 0;\n    }\n  }\n`;\n","import * as React from \"react\";\nimport { css, cx } from \"emotion\";\nimport { ToolbarComponentProps } from \"./toolbar_component.interfaces\";\nimport { IconComponent } from \"../icon/icon_component\";\nimport { PRIMARY, BRIGHT } from \"../constant/colors\";\nimport { ColorChooserComponent } from \"../color_chooser/color_chooser_component\";\nimport { Command } from \"../constant/variables\";\n\nexport const ToolbarComponent = (props: ToolbarComponentProps) => {\n  const iconStyle = {\n    size: 18,\n    color: {\n      default: PRIMARY.PRIMARY_4,\n      hover: BRIGHT.BRIGHT_2\n    },\n    bgColor: {\n      default: PRIMARY.PRIMARY_3,\n      hover: PRIMARY.PRIMARY_2\n    }\n  };\n\n  function handleIconOnClick(id: string): void {\n    props.onIconClick(id);\n  }\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <IconComponent\n        id={Command.TEXT_BOLD}\n        iconClass=\"fa fa-bold\"\n        styleProps={iconStyle}\n        onClick={id => handleIconOnClick(id)}\n      />\n      <IconComponent\n        id={Command.TEXT_ITALIC}\n        iconClass=\"fa fa-italic\"\n        styleProps={iconStyle}\n        onClick={id => handleIconOnClick(id)}\n      />\n      <IconComponent\n        id={Command.TEXT_UNDERLINE}\n        iconClass=\"fa fa-underline\"\n        styleProps={iconStyle}\n        onClick={id => handleIconOnClick(id)}\n      />\n      <IconComponent\n        id={Command.ALIGN_LEFT}\n        iconClass=\"fa fa-align-left\"\n        styleProps={iconStyle}\n        onClick={id => handleIconOnClick(id)}\n      />\n      <IconComponent\n        id={Command.ALIGN_RIGHT}\n        iconClass=\"fa fa-align-right\"\n        styleProps={iconStyle}\n        onClick={id => handleIconOnClick(id)}\n      />\n      <IconComponent\n        id={Command.ALIGN_CENTER}\n        iconClass=\"fa fa-align-center\"\n        styleProps={iconStyle}\n        onClick={id => handleIconOnClick(id)}\n      />\n      <ColorChooserComponent size={22} initialValue={PRIMARY.PRIMARY_1} />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { fontSizeItems, fontFamilyItems } from \"../constant/font\";\nimport { Command, BackGroundType } from \"../constant/variables\";\nimport { TextEditorComponentProps } from \"./text_editor_component.interfaces\";\nimport { ToolbarComponent } from \"../toolbar/toolbar_component\";\n\n// helpers\nfunction rgbToHex(rgb: string): string {\n  const splittedRGB = rgb\n    .split(\"(\")[1]\n    .split(\")\")[0]\n    .split(\",\");\n  const hexString = splittedRGB.map(x => {\n    x = parseInt(x).toString(16);\n    return x.length === 1 ? `0${x}` : x;\n  });\n  return `#${hexString.join(\"\")}`;\n}\n\nexport const TextEditorWidgetComponent = (props: TextEditorComponentProps) => {\n  const { initTextHTML, textColor, bgColor, bgImage } = props;\n\n  const shades = { shade13: \"#ffffff\", shade3: \"#37474f\" };\n  const INIT_COLOR = !!textColor ? textColor : shades.shade3;\n  const INIT_FONT_FAMILY = fontFamilyItems[5];\n  const INIT_FONT_SIZE = fontSizeItems[1];\n\n  const [fontColor, setFontColor] = React.useState(INIT_COLOR);\n  const [fontSize, setFontSize] = React.useState(INIT_FONT_SIZE.id);\n  const [fontFamily, setFontFamily] = React.useState(INIT_FONT_FAMILY.id);\n\n  const [backgroundImage, setBgImage] = React.useState(bgImage);\n  const [backgroundColor, setBgColor] = React.useState(\n    bgColor || shades.shade13\n  );\n\n  const [italic, setItalic] = React.useState(false);\n  const [bold, setBold] = React.useState(false);\n  const [underline, setUnderline] = React.useState(false);\n  const [align, setAlign] = React.useState(Command.ALIGN_LEFT);\n\n  const textAreaRef = React.useRef(null);\n\n  const rangeRef = React.useRef({\n    start: 0,\n    end: 0,\n    startNode: undefined,\n    endNode: undefined\n  });\n\n  function setCaretPosition(): void {\n    if ((window.getSelection() || {}).type !== \"None\") {\n      const range: Range = window.getSelection().getRangeAt(0);\n      const { startContainer, endContainer, startOffset, endOffset } = range;\n\n      rangeRef.current = {\n        end: endOffset,\n        endNode: endContainer,\n        start: startOffset,\n        startNode: startContainer\n      };\n    }\n  }\n\n  function onMouseTextEditorUp(e: React.MouseEvent): void {\n    setCurrentStyle(window.getSelection());\n  }\n\n  function onKeyTextEditorUp(e: React.KeyboardEvent): void {\n    setCurrentStyle(window.getSelection());\n  }\n\n  function setCurrentStyle(currentSelection: Selection): void {\n    const {\n      anchorNode,\n      anchorOffset,\n      focusNode,\n      focusOffset\n    } = currentSelection;\n\n    if (\n      !anchorNode ||\n      !focusNode ||\n      anchorNode.nodeType !== 3 ||\n      focusNode.nodeType !== 3\n    ) {\n      return;\n    }\n    const range: Range = document.createRange();\n\n    range.setStart(anchorNode, anchorOffset);\n    range.setEnd(focusNode, focusOffset);\n\n    const selection: Selection = window.getSelection();\n\n    [\n      Command.TEXT_BOLD,\n      Command.TEXT_ITALIC,\n      Command.TEXT_UNDERLINE,\n      Command.FONT_COLOR,\n      Command.FONT_FAMILY,\n      Command.FONT_SIZE,\n      Command.ALIGN_LEFT,\n      Command.ALIGN_RIGHT,\n      Command.ALIGN_CENTER\n    ].forEach(command => {\n      const currentState: boolean = document.queryCommandState(command);\n      const currentValue: string = document.queryCommandValue(command);\n\n      switch (command) {\n        case Command.TEXT_BOLD:\n          setBold(currentState);\n          break;\n        case Command.TEXT_ITALIC:\n          setItalic(currentState);\n          break;\n        case Command.TEXT_UNDERLINE:\n          setUnderline(currentState);\n          break;\n        case Command.ALIGN_CENTER:\n          if (currentState) {\n            setAlign(Command.ALIGN_CENTER);\n          }\n          break;\n        case Command.ALIGN_LEFT:\n          if (currentState) {\n            setAlign(Command.ALIGN_LEFT);\n          }\n          break;\n        case Command.ALIGN_RIGHT:\n          if (currentState) {\n            setAlign(Command.ALIGN_RIGHT);\n          }\n          break;\n        case Command.FONT_COLOR:\n          const hexColor = rgbToHex(currentValue);\n          hexColor && setFontColor(hexColor);\n          break;\n        case Command.FONT_SIZE:\n          setFontSize(currentValue);\n          break;\n        case Command.FONT_FAMILY:\n          const fontName = fontFamilyItems.find(\n            item => item.label === currentValue\n          );\n          fontName && setFontFamily(fontName.id);\n          break;\n        default:\n          break;\n      }\n    });\n\n    if (selection.rangeCount > 0) {\n      return;\n    }\n\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  function restoreRange(): void {\n    const range: Range = document.createRange();\n    range.setStart(textAreaRef.current, 0);\n    range.collapse(true);\n    const nodeStack: Node[] = [textAreaRef.current];\n    let node: Node,\n      foundStart: boolean = false,\n      stop: boolean = false;\n\n    while (!stop && (node = nodeStack.pop())) {\n      if (node.nodeType == 3) {\n        if (!foundStart && node === rangeRef.current.startNode) {\n          range.setStart(rangeRef.current.startNode, rangeRef.current.start);\n          foundStart = true;\n        }\n        if (foundStart && node === rangeRef.current.endNode) {\n          range.setEnd(rangeRef.current.endNode, rangeRef.current.end);\n          stop = true;\n        }\n      } else {\n        let i = node.childNodes.length;\n        while (i--) {\n          nodeStack.push(node.childNodes[i]);\n        }\n      }\n    }\n\n    const selection: Selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  function execCommand(command: Command, value?: string): void {\n    requestAnimationFrame(() => {\n      restoreRange();\n      document.execCommand(command, false, value);\n\n      switch (command) {\n        case Command.TEXT_ITALIC:\n          setItalic(!italic);\n          break;\n        case Command.TEXT_BOLD:\n          setBold(!bold);\n          break;\n        case Command.TEXT_UNDERLINE:\n          setUnderline(!underline);\n          break;\n        case Command.ALIGN_CENTER:\n          setAlign(Command.ALIGN_CENTER);\n          break;\n        case Command.ALIGN_LEFT:\n          setAlign(Command.ALIGN_LEFT);\n          break;\n        case Command.ALIGN_RIGHT:\n          setAlign(Command.ALIGN_RIGHT);\n          break;\n        case Command.FONT_COLOR:\n          setFontColor(value);\n          break;\n        case Command.FONT_SIZE:\n          setFontSize(value);\n          break;\n        case Command.FONT_FAMILY:\n          const fontName = fontFamilyItems.find(item => item.label === value);\n          fontName && setFontFamily(fontName.id);\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  function setBackgroundImage(type: BackGroundType, value: string): void {\n    switch (type) {\n      case BackGroundType.IMAGE:\n        if (!value) {\n          setBgImage(\"\");\n        }\n        if (textAreaRef.current.style.backgroundColor) {\n          setBgColor(\"\");\n        }\n        setBgImage(value);\n        break;\n      case BackGroundType.COLOR:\n        if (!value) {\n          setBgColor(\"\");\n        }\n        if (textAreaRef.current.style.backgroundImage) {\n          setBgImage(\"\");\n        }\n        setBgColor(value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  function renderToolbar(): JSX.Element {\n    return (\n      <ToolbarComponent\n        onIconClick={id => {\n          console.log(id);\n          execCommand(id as Command);\n        }}\n      />\n    );\n  }\n\n  function renderMainframe(): JSX.Element {\n    return (\n      <div className=\"text-editor-widget-main\" style={{ border: \"1px solid\" }}>\n        <div\n          tabIndex={0}\n          onMouseUp={onMouseTextEditorUp}\n          onKeyUp={onKeyTextEditorUp}\n          contentEditable={true}\n          dangerouslySetInnerHTML={{\n            __html: initTextHTML\n          }}\n          className=\"text-editor-widget-main-textarea\"\n          ref={textAreaRef}\n          onBlur={() => {\n            setCaretPosition();\n          }}\n          style={{\n            color: INIT_COLOR,\n            fontSize: INIT_FONT_SIZE.label,\n            fontFamily: INIT_FONT_FAMILY.label,\n            backgroundImage: `${\n              backgroundImage ? `url(${backgroundImage})` : \"\"\n            }`,\n            backgroundColor\n          }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {renderToolbar()}\n      {renderMainframe()}\n    </div>\n  );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TextEditorWidgetComponent } from \"./text_editor/text_editor_component\";\nimport { IconComponent } from \"./icon/icon_component\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <TextEditorWidgetComponent initTextHTML=\"Hello world\" />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}